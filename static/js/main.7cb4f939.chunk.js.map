{"version":3,"sources":["Asset/forest.jpg","Home.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Image","src","forest","Container","Row","Col","md","roundedCircle","Boolean","window","location","hostname","match","App","state","loading","Promise","resolve","setTimeout","then","setState","this","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,oC,mPCsD5BC,MAjDf,WAEI,OACA,oCACE,4BAAQC,UAAU,aACd,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACpC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,iEACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKX,UAAU,WACX,kBAACW,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,kCACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,uCAKd,0BAAMN,UAAU,kBACZ,yBAAKU,GAAG,OAAOV,UAAU,qCACrB,kBAACa,EAAA,EAAD,CAAOb,UAAU,OACjBc,IAAKC,MAEL,wBAAIf,UAAU,mCAAd,8FAAgE,0BAAMA,UAAU,oBAAhB,oCAEpE,yBAAKU,GAAG,OAAOV,UAAU,WACrB,kBAACgB,EAAA,EAAD,CAAWhB,UAAU,QACjB,kBAACiB,EAAA,EAAD,CAAKjB,UAAU,cACX,kBAACkB,EAAA,EAAD,CAAKC,GAAI,EAAGnB,UAAU,eAClB,kBAACa,EAAA,EAAD,CACIC,IAAI,qFACJM,eAAa,EACbpB,UAAU,UAEd,wBAAIA,UAAU,cAAd,8BAEJ,kBAACkB,EAAA,EAAD,CAAKC,GAAI,GACL,kFACA,qLAMtB,4BAAQnB,UAAU,qBAChB,uBAAGA,UAAU,0BAAb,mBCpCYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICXAC,E,4MACFC,MAAQ,CACJC,SAAS,G,kEAGQ,IAAD,OA8Bb,IAAIC,SAAQ,SAACC,GAAD,OAAaC,YAAW,kBAAMD,MAAW,QA5BxCE,MAAK,kBAAM,EAAKC,SAAS,CAAEL,SAAS,S,+BAOpD,OAFoBM,KAAKP,MAAjBC,QAIA,oCACI,yBAAK5B,UAAU,yBACP,yBAAKA,UAAU,YACX,yBAAKA,UAAU,SACf,wBAAIA,UAAU,eAAd,0DAShB,kBAAC,EAAD,U,GA7BEmC,IAAMC,WAqCxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAAAa,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7cb4f939.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/forest.7ebb11db.jpg\";","import React from 'react';\nimport { Container, Navbar, Nav, Row, Col, Image } from 'react-bootstrap';\nimport forest from './Asset/forest.jpg'\n\n\nfunction Home() {\n\n    return (\n    <>\n      <header className=\"fixed-top\">\n          <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n              <Navbar.Brand href=\"#home\">Личный сайт</Navbar.Brand>\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                  <Nav className=\"mr-auto\">\n                      <Nav.Link href=\"#home\">Домой</Nav.Link>\n                      <Nav.Link href=\"#link\">В жопу</Nav.Link>\n                  </Nav>\n              </Navbar.Collapse>\n          </Navbar>\n      </header>\n        <main className=\"bg-transparent\">\n            <div id=\"home\" className=\"m-0 row align-items-center vh-100\">\n                <Image className=\"frst\"\n                src={forest}\n                />\n                <h1 className=\"display-2 col text-center greet\">Добро пожаловать<span className=\"h6 text-black-50\">нахуй</span></h1>\n            </div>\n            <div id=\"link\" className=\"bg-dark\">\n                <Container className=\"pt-5\">\n                    <Row className=\"text-light\">\n                        <Col md={4} className=\"text-center\">\n                            <Image\n                                src=\"https://sun1-29.userapi.com/H_Tp5d5HzjbSpi_n-i_TdDdNVurLfJZuxxYOCA/WdfFdybIPzg.jpg\"\n                                roundedCircle\n                                className=\"w-100\"\n                            />\n                            <h4 className=\"text-light\">Это я</h4>\n                        </Col>\n                        <Col md={8}>\n                            <h4>А это жопа</h4>\n                            <p>Тут что-то должно быть, но нет</p>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </main>\n      <footer className=\"bg-dark pt-5 pb-1\">\n        <p className=\"text-center text-light\">by wanetol72</p>\n      </footer>\n    </>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends React.Component {\n    state = {\n        loading: true\n    };\n\n    componentDidMount() {\n        // this simulates an async action, after which the component will render the content\n        demoAsyncCall().then(() => this.setState({ loading: false }));\n    }\n\n    render() {\n\n        const { loading } = this.state;\n\n        if(loading) { // if your component doesn't have to wait for an async action, remove this block\n            return (\n                <>\n                    <div className=\"bg-dark vw-100 vh-100\">\n                            <div className=\"load-wrp\">\n                                <div className=\"load\"></div>\n                                <h1 className=\"loader-text\">Загрузка...</h1>\n                            </div>\n\n                    </div>\n                </>\n            ); // render null when app is not ready\n        }\n\n        return (\n                <Home />\n        );\n    }\n}\n\nfunction demoAsyncCall() {\n    return new Promise((resolve) => setTimeout(() => resolve(), 1000));\n}\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}